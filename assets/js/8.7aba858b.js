(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(t,a,n){"use strict";n.r(a);var e=n(43),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"js-专精-函数-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-专精-函数-闭包"}},[t._v("#")]),t._v(" JS 专精-函数/闭包")]),t._v(" "),n("h2",{attrs:{id:"函数的影响因素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数的影响因素"}},[t._v("#")]),t._v(" 函数的影响因素")]),t._v(" "),n("blockquote",[n("p",[t._v("重点：所有函数的问题都可以归结到这两个因素上")])]),t._v(" "),n("ul",[n("li",[t._v("定义时输入的参数 params")]),t._v(" "),n("li",[t._v("定义时的环境 env")])]),t._v(" "),n("h2",{attrs:{id:"定义时的环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义时的环境"}},[t._v("#")]),t._v(" 定义时的环境")]),t._v(" "),n("p",[t._v("根据 JS 的词法环境，函数的词法环境中的外部引用是函数在定义时的环境而不是调用时的环境，"),n("strong",[t._v("函数调用时才会创建函数词法环境 t")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let x = 'x'\nlet a = '1'\nfunction f1(x){\n    return x + a\n};\n{\n    let a = '2'\n    f1('x') //值为\"x+1\"\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function multiply(e, f) {\n var g = 20;\n return e * f * g;\n}\nmultiply(20, 30);//此时创建的词法环境如下\n\nFunctionExectionContext = {\n  LexicalEnvironment: {\n    EnvironmentRecord: {\n      Type: "Declarative",\n      // 标识符在这里绑定\n      Arguments: { 0: 20, 1: 30, length: 2 },\n    },\n    outer: <GlobalLexicalEnvironment>,\n  ThisBinding: <Global Object or undefined>,\n},\nVariableEnvironment: {\n  EnvironmentRecord: {\n    Type: "Declarative",\n        // 标识符在这里绑定\n        g: undefined\n  },\n  outer: <GlobalLexicalEnvironment>,\n      ThisBinding: <Global Object or undefined>\n}\n}\n')])])]),n("p",[t._v("那么我们看下面代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let x = 'x'\nlet a = '1'\nfunction f1(x){\n    return x + a\n};\na = \"2\"\n{\n    let a = '2'\n    f1('x') //值为\"x+2\"\n}\n")])])]),n("p",[t._v("此时由于在函数调用之前，所以全局词法环境更新了，导致函数词法环境的外部引用更新了")]),t._v(" "),n("h2",{attrs:{id:"闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),n("p",[t._v("并不是所有语言都会有闭包这种操作（函数访问外部变量），ruby 就不允许。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("for(var i=0;i<6;i++){\n    setTimeout(()=>console.1og(i),1000) // 箭头函数访问了i\n}\n")])])]),n("p",[t._v("函数执行时词法环境的外部引用是全局词法环境，执行时 i 已经更新到了 6。也可以简单理解为始终只有一个 i，深刻理解就是函数的词法环境中的外部引用始终是同一个词法环境")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("for(let i=0;i<6;i++){\n    setTimeout(()=>console.1og(i),1000) // 箭头函数访问了i\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("for(let i=0;i<6;i++){\n    let i = 隐藏作用域中的i // 看这里看这里看这里\n    setTimeout(()=>console.1og(i),1000) // 箭头函数访问了i\n}\n")])])]),n("ol",[n("li",[t._v("for 循环的小括号是一个作用域，而花括号又是一个作用域，而小括号的作用域是包裹住了大括号作用域的。")]),t._v(" "),n("li",[t._v("for( let i = 0; i< 5; i++) { 循环体 } 在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。")]),t._v(" "),n("li",[t._v("所以函数上下文的词法环境中的外部引用不是同一个词法环境")]),t._v(" "),n("li",[t._v("块级上下文和函数上下文创建是一样的")])]),t._v(" "),n("h2",{attrs:{id:"闭包的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包的作用"}},[t._v("#")]),t._v(" 闭包的作用")]),t._v(" "),n("ul",[n("li",[t._v("闭包可以维持一个变量不死，但不能维持这个变量的值。")]),t._v(" "),n("li",[t._v("对象是穷人的闭包，对象也可以来维持住一个变量")]),t._v(" "),n("li",[t._v("如果一门语言不支持闭包，你可以用对象代理")]),t._v(" "),n("li",[t._v("闭包是穷人的对象")]),t._v(" "),n("li",[t._v("如果一门语言不支持对象，你可以用闭包代理")])]),t._v(" "),n("h2",{attrs:{id:"this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),n("p",[t._v("在讲 this 之前回忆函数的声明方式，")]),t._v(" "),n("ol",[n("li",[t._v("new Function")]),t._v(" "),n("li",[t._v("function f(){}")]),t._v(" "),n("li",[t._v("let a = function(){}")]),t._v(" "),n("li",[t._v("let a = ()=>{}")])]),t._v(" "),n("p",[t._v("前两种会在词法环境里被声明成函数。而后两种则是变量只是赋值而已。")]),t._v(" "),n("p",[n("strong",[t._v("根据之前的词法环境分析法")]),t._v("在函数调用时才会创建函数上下文，上下文里的词法环境里的 this 绑定，才会确定 this 的值。箭头函数没有 this 只是定义时的 this。this 和外部引用一样是会更新的。")]),t._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),n("p",[t._v("现在我们回过头来看函数的两大因素，env 和 params，对应函数词法。我们得出 this 和外部引用都属于环境是会改变的，而参数一但传入就不会改变。这里的改变不改变只是说函数调用之前而不是函数调用时。")]),t._v(" "),n("h2",{attrs:{id:"三种-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三种-this"}},[t._v("#")]),t._v(" 三种 this")]),t._v(" "),n("ul",[n("li",[t._v("fn(1,2) ----window")]),t._v(" "),n("li",[t._v("obj.method('hi') ---obj")]),t._v(" "),n("li",[t._v("array"),n("a",{attrs:{href:"'hi'"}},[t._v("0")]),t._v(" 等价于 array.0() ---array")])]),t._v(" "),n("p",[t._v("重点：this 只有在调用时才会确定")]),t._v(" "),n("p",[t._v("window.length 就是浏览器窗口和 iframe 的个数，arguments.length 表示的是实际上向函数传入了多少个参数,这个数字可以比形参数量大,也可以比形参数量")])])}),[],!1,null,null,null);a.default=s.exports}}]);