(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{380:function(e,n,t){"use strict";t.r(n);var r=t(43),i=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[e._v("#")]),e._v(" 链表")]),e._v(" "),t("h2",{attrs:{id:"写在前面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[e._v("#")]),e._v(" 写在前面")]),e._v(" "),t("p",[e._v("数据结构就是各数据元素之间的逻辑关系，大致分为集合关系，线性关系，树关系，图关系")]),e._v(" "),t("h2",{attrs:{id:"线性表存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性表存储结构"}},[e._v("#")]),e._v(" 线性表存储结构")]),e._v(" "),t("p",[e._v("线性表在内存中的两种数据结构")]),e._v(" "),t("ul",[t("li",[e._v("链式存储")]),e._v(" "),t("li",[e._v("顺序存储，静态，动态")])]),e._v(" "),t("h2",{attrs:{id:"数组的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的缺陷"}},[e._v("#")]),e._v(" 数组的缺陷")]),e._v(" "),t("p",[e._v("在很多编程语言中，数组的长度是固定的，所以当数组已被数据填满时，再要加入新的元素就会非常困难。在数组中，添加和删\n除元素也很麻烦，因为需要将数组中的其他元素向前或向后平移，以反映数组刚刚进行了\n添加或删除操作。")]),e._v(" "),t("p",[e._v("JavaScript 中数组的主要问题是，它们被实现成了对象，与其他语言的数组相比，效率很低。")]),e._v(" "),t("p",[e._v("除了对数据的随机访问，链表几乎可以用在任何可以使用一维数组的情况中。")]),e._v(" "),t("h2",{attrs:{id:"链表的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表的基本概念"}},[e._v("#")]),e._v(" 链表的基本概念")]),e._v(" "),t("ul",[t("li",[e._v("为了表示数据元素与后继数据元素之间的逻辑关系，对数据元素来说不仅要存储本身的数据还要存储后继元素的位置。")]),e._v(" "),t("li",[e._v("分别称为数据域和指针域，两部分合起来称为结点")]),e._v(" "),t("li",[e._v("数据元素就是结点，一组结点组成的集合称为数据对象")]),e._v(" "),t("li",[e._v("我们把第一个结点的位置叫做头指针，为了更加方便的操作链表会在单链表的第一个结点前附加一个结点称为头结点，头结点的数据域不存储任何东西，头结点可以没有。")])]),e._v(" "),t("p",[e._v("链表是由一组结点组成的集合。每个结点都使用一个对象的引用指向它的后继。指向另一\n个结点的引用叫做链。（一个变量存了其他变量的地址就叫对其他变量的引用）")]),e._v(" "),t("h2",{attrs:{id:"头结点和头指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#头结点和头指针"}},[e._v("#")]),e._v(" 头结点和头指针")]),e._v(" "),t("ul",[t("li",[e._v("有了头结点，对第一个元素结点前插入结点和删除第一结点的操作和其他操作统一了。")]),e._v(" "),t("li",[e._v("头结点不是必要要素")]),e._v(" "),t("li",[e._v("链表中第一个结点的存储位置叫做头指针")])]),e._v(" "),t("h2",{attrs:{id:"链表的基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表的基本操作"}},[e._v("#")]),e._v(" 链表的基本操作")]),e._v(" "),t("ul",[t("li",[e._v("找到值对应的结点 find(item)")]),e._v(" "),t("li",[e._v("找到值对应的前一个结点 findPrevious(item)")]),e._v(" "),t("li",[e._v("在值后面插入结点 insert(element,item)")]),e._v(" "),t("li",[e._v("移除值对应的结点 remove(item)")])]),e._v(" "),t("h2",{attrs:{id:"链表的javascript实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表的javascript实现"}},[e._v("#")]),e._v(" 链表的JavaScript实现")]),e._v(" "),t("p",[e._v("每一个node为一个对象，因为js语言的实现，对象赋值，赋值的是地址")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Node(element) {\n  this.element = element;\n  this.next = null;\n}\nfunction LinkedList(head) {\n  this.head = new Node(head);\n  this.find = find;\n  this.insert = insert;\n  this.remove = remove;\n  this.findPrevious = findPrevious;\n  this.travel = travel()\n}\nfunction find(item) {\n  let currNode = this.head;\n  while (currNode.element !== item) {\n    currNode = currNode.next;\n  }\n  return currNode;\n}\nfunction insert(element, item) {\n  let newNode = new Node(element);\n  let current = this.find(item);\n  newNode.next = current.next;\n  current.next = newNode;\n}\nfunction remove(item) {\n  let preNode = this.findPrevious(item);\n  if (preNode) {\n    preNode.next = preNode.next.next;\n  }\n}\nfunction findPrevious(item) {\n  let currNode = this.head;\n  while (currNode.next && currNode.next.element !== item) {\n    currNode = currNode.next;\n  }\n  return currNode;\n}\nfunction travel(callback) {\n  let currNode = this.head;\n  while (currNode !== null) {\n    callback(currNode);\n    currNode = currNode.next;\n  }\n}\n\n")])])]),t("h2",{attrs:{id:"双向链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[e._v("#")]),e._v(" 双向链表")]),e._v(" "),t("p",[e._v("管从链表的头结点遍历到尾结点很简单，但反过来，从后向前遍历则没那么简单。通过\n给 Node 对象增加一个属性，该属性存储指向前驱结点的链接。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function DbNode(element) {\n  this.element = element;\n  this.next = null;\n  this.previous = null;\n}\nfunction DbLinkedList(head) {\n  this.head = new DbNode(head);\n  this.insert = insert;\n  this.find = find;\n  this.remove = remove;\n}\nfunction insert(element, item) {\n  let newNode = new DbNode(element);\n  let current = find(item);\n  newNode.next = current.next;\n  newNode.previous = current;\n  current.next = newNode;\n}\nfunction find(item) {\n  let currNode = this.head;\n  while (currNode.element !== item) {\n    currNode = currNode.next;\n  }\n  return currNode;\n}\nfunction remove(item) {\n  let currNode = find(item);\n  if (currNode !== null) {\n    currNode.previous.next = currNode.next;\n    currNode.next.previous = currNode.previous;\n  }\n}\n")])])]),t("h2",{attrs:{id:"循环链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[e._v("#")]),e._v(" 循环链表")]),e._v(" "),t("p",[e._v("循环链表和单向链表相似，结点类型都是一样的。唯一的区别是，在创建循环链表时，让\n其头结点的 next 属性指向它本身。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function CircularLinkedList(head) {\n  this.head = new Node(head);\n  this.head.next = this.head;\n}\n")])])]),t("p",[e._v("加一行代码就可以解决,travel方法会死循环,remove方法也要考虑到移除头结点要考虑到this.head始终存在的问题。")]),e._v(" "),t("h2",{attrs:{id:"循环链表解决实际问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环链表解决实际问题"}},[e._v("#")]),e._v(" 循环链表解决实际问题")]),e._v(" "),t("p",[e._v("传说在公元 1 世纪的犹太战争中，犹太历史学家弗拉维奥·约瑟夫斯和他的 10 个同胞\n被罗马士兵包围。犹太士兵决定宁可自杀也不做俘虏，于是商量出了一个自杀方案。他\n们围成一个圈，从一个人开始，数到第三个人时将第三个人杀死，然后再数，直到杀光\n所有人。约瑟夫和另外一个人决定不参加这个疯狂的游戏，他们快速地计算出了两个位\n置，站在那里得以幸存。写一段程序将 n 个人围成一圈，并且第 m 个人会被杀掉，计算\n一圈人中哪两个人最后会存活。使用循环链表解决该问题。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Node(element) {\n  this.element = element;\n  this.next = null;\n}\nfunction LinkedList(head) {\n  this.head = new Node(head);\n  this.head.next = this.head;\n  this.find = find;\n  this.insert = insert;\n  this.remove = remove;\n  this.findPrevious = findPrevious;\n  this.travel = travel;\n  this.advance = advance;\n}\nfunction find(item) {\n  let currNode = this.head;\n  while (currNode.element !== item) {\n    currNode = currNode.next;\n  }\n  return currNode;\n}\nfunction insert(element, item) {\n  let newNode = new Node(element);\n  let current = this.find(item);\n  newNode.next = current.next;\n  current.next = newNode;\n}\nfunction remove(item) {\n  let preNode = this.findPrevious(item);\n  if (preNode) {\n    if (this.find(item) === this.head) {\n      this.head = this.head.next;\n      preNode.next = this.head;\n      return;\n    }\n    preNode.next = preNode.next.next;\n  }\n}\nfunction findPrevious(item) {\n  let currNode = this.head;\n  while (currNode.next && currNode.next.element !== item) {\n    currNode = currNode.next;\n  }\n  return currNode;\n}\nfunction travel(callback) {\n  let currNode = this.head;\n  do {\n    console.log(currNode.element);\n    callback(currNode);\n    currNode = currNode.next;\n  } while (currNode.element !== this.head.element);\n}\nfunction advance(n) {\n  let currNode = this.head;\n  while (n > 0) {\n    currNode = currNode.next;\n    n = n - 1;\n  }\n  return currNode;\n}\n\nfunction code() {\n  let list = new LinkedList(1);\n  let length = 1;\n  let n = 2;\n  for (let i = 1; i < 10; i++) {\n    list.insert(i + 1, i);\n    length += 1;\n  }\n  while (length > 3) {\n    list.remove(list.advance(n).element);\n    n += 2;\n    length -= 1;\n  }\n}\ncode();\n")])])]),t("h2",{attrs:{id:"引入头结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入头结点"}},[e._v("#")]),e._v(" 引入头结点")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function LinkedList() {\n    this.head = new Node(new Symbol());\n}\n")])])]),t("p",[e._v("删除第一个元素结点也统一了")]),e._v(" "),t("p",[e._v("在引入头结点之前没有办法做到删除第一个结点，具体看remove代码，现在我们可以了因为this.head不会永远不会被删除。")]),e._v(" "),t("h2",{attrs:{id:"整表删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整表删除"}},[e._v("#")]),e._v(" 整表删除")]),e._v(" "),t("ul",[t("li",[e._v("在c语言中没有垃圾回收机制，只能手动删除或者程序结束回收")]),e._v(" "),t("li",[e._v("但是我们浏览器有回收机制，对象不被引用就被回收了，把代表链表的变量赋值为null，直接清零。")]),e._v(" "),t("li",[e._v("a = new LinkedList，a并不是头结点，a.head才是头结点，一般来说a和a.head都是不会被删除的。")])])])}),[],!1,null,null,null);n.default=i.exports}}]);